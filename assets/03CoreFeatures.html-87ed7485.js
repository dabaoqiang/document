import{_ as d,W as u,X as m,$ as s,a1 as t,Y as n,Z as a,a0 as e,E as i}from"./framework-81e6c38b.js";const v={},h=e(`<h1 id="核心功能-springapplication" tabindex="-1"><a class="header-anchor" href="#核心功能-springapplication" aria-hidden="true">#</a> 核心功能-SpringApplication</h1><p><code>SpringApplication</code>类提供了一种方便的方式来引导从<code>main()</code>方法中启动的Spring应用程序。在许多情况下，你可以委托给静态的<code>SpringApplication.run</code>方法，如下面的例子中所示。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当您的应用程序启动时，您应该会看到类似于以下输出的内容:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token builtin class-name">.</span>   ____          _            __ _ _
 /<span class="token punctuation">\\</span><span class="token punctuation">\\</span> / ___<span class="token string">&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\
( ( )\\___ | &#39;</span>_ <span class="token operator">|</span> <span class="token string">&#39;_| | &#39;</span>_ <span class="token punctuation">\\</span>/ _\` <span class="token operator">|</span> <span class="token punctuation">\\</span> <span class="token punctuation">\\</span> <span class="token punctuation">\\</span> <span class="token punctuation">\\</span>
 <span class="token punctuation">\\</span><span class="token punctuation">\\</span>/  ___<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
  <span class="token string">&#39;  |____| .__|_| |_|_| |_\\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.0.1)

2022-12-22T21:07:39.551Z  INFO 21032 --- [           main] o.s.b.d.f.s.MyApplication                : Starting MyApplication using Java 17.0.5 with PID 21032 (/opt/apps/myapp.jar started by myuser in /opt/apps/)
2022-12-22T21:07:39.558Z  INFO 21032 --- [           main] o.s.b.d.f.s.MyApplication                : No active profile set, falling back to 1 default profile: &quot;default&quot;
2022-12-22T21:07:41.286Z  INFO 21032 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2022-12-22T21:07:41.316Z  INFO 21032 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2022-12-22T21:07:41.317Z  INFO 21032 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.4]
2022-12-22T21:07:41.496Z  INFO 21032 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2022-12-22T21:07:41.498Z  INFO 21032 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1878 ms
2022-12-22T21:07:42.281Z  INFO 21032 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;</span>&#39;
<span class="token number">2022</span>-12-22T21:07:42.292Z  INFO <span class="token number">21032</span> --- <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o.s.b.d.f.s.MyApplication                <span class="token builtin class-name">:</span> Started MyApplication <span class="token keyword">in</span> <span class="token number">3.479</span> seconds <span class="token punctuation">(</span>process running <span class="token keyword">for</span> <span class="token number">4.472</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，会显示<code>INFO</code>日志信息，包括一些相关的启动细节，比如启动应用程序的用户。如果你需要一个<code>INFO</code>以外的日志级别，你可以设置它，如日志级别中所述。应用程序的版本是通过主应用程序类的包的实现版本来确定的。可以通过设置<code>spring.main.log-startup-info</code>为<code>false</code>来关闭启动信息记录。这也将关闭应用程序的活动配置文件的日志记录。</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>为了在启动过程中增加额外的日志记录，你可以在<code>SpringApplication</code>的子类中覆盖<code>logStartupInfo(boolean)</code>。</p></div><h2 id="_1-1-启动失败" tabindex="-1"><a class="header-anchor" href="#_1-1-启动失败" aria-hidden="true">#</a> 1.1. 启动失败</h2><p>如果你的应用程序无法启动，注册的<code>FailureAnalyzers</code>就有机会提供一个专门的错误信息和一个具体的行动来解决问题。例如，如果你在<code>8080</code>端口上启动一个网络应用，而该端口已经被使用，你应该看到类似于下面的信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>***************************
APPLICATION FAILED TO START
***************************

Description:

Embedded servlet container failed to start. Port <span class="token number">8080</span> was already <span class="token keyword">in</span> use.

Action:

Identify and stop the process that is listening on port <span class="token number">8080</span> or configure this application to listen on another port.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Spring Boot提供了许多<code>FailureAnalyzer</code>实现，你也可以添加自己的。</p></div><p>如果没有故障分析器能够处理异常，你仍然可以显示完整的条件报告以更好地了解出错的原因。要做到这一点，你需要为<code>org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</code>启用调试属性或启用DEBUG日志。</p><p>例如，如果你通过使用<code>java -jar</code>来运行你的应用程序，你可以按以下方式启用调试属性。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> myproject-0.0.1-SNAPSHOT.jar <span class="token parameter variable">--debug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_1-2-懒加载" tabindex="-1"><a class="header-anchor" href="#_1-2-懒加载" aria-hidden="true">#</a> 1.2. 懒加载</h2><p><code>SpringApplication</code>允许应用程序被懒惰地初始化。当懒惰初始化被启用时，Bean会在需要时被创建，而不是在应用程序启动时。因此，启用懒惰初始化可以减少应用程序的启动时间。在一个Web应用程序中，启用懒惰初始化将导致许多与Web相关的Bean在收到HTTP请求之前不会被初始化。</p><p>懒惰初始化的一个缺点是，它可以延迟发现应用程序的问题。如果一个配置错误的Bean被懒惰地初始化了，那么在启动过程中就不会再出现故障，问题只有在Bean被初始化时才会显现出来。还必须注意确保JVM有足够的内存来容纳应用程序的所有Bean，而不仅仅是那些在启动期间被初始化的Bean。由于这些原因，默认情况下不启用懒惰初始化，建议在启用懒惰初始化之前，对JVM的堆大小进行微调。</p><p>可以通过在<code>SpringApplicationBuilder</code>上使用 <code>lazyInitialization</code> 方法或在<code>SpringApplication</code>上使用 <code>setLazyInitialization</code> 方法以编程方式启用惰性初始模式。或者，也可以使用 <code> spring.main.lazy-initialization</code>属性启用它，如下面的示例所示:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token key atrule">lazy-initialization</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),b=n("div",{class:"language-properties line-numbers-mode","data-ext":"properties"},[n("pre",{class:"language-properties"},[n("code",null,[n("span",{class:"token key attr-name"},"spring.main.lazy-initialization"),n("span",{class:"token punctuation"},"="),n("span",{class:"token value attr-value"},"true"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),k=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{class:"language-yaml"},[n("code",null,[n("span",{class:"token key atrule"},"spring"),n("span",{class:"token punctuation"},":"),a(`
  `),n("span",{class:"token key atrule"},"main"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token key atrule"},"lazy-initialization"),n("span",{class:"token punctuation"},":"),a(),n("span",{class:"token boolean important"},"true"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=e('<div class="custom-container tip"><p class="custom-container-title">Tip</p><p>如果你想禁用某些Bean的懒惰初始化，而对应用程序的其他部分使用懒惰初始化，你可以使用<code>@Lazy(false)</code>注解将它们的懒惰属性明确地设置为false。</p></div><h2 id="_1-3-自定义-banner" tabindex="-1"><a class="header-anchor" href="#_1-3-自定义-banner" aria-hidden="true">#</a> 1.3. 自定义 Banner</h2><p>启动时打印的标语可以通过在classpath中添加<code>banner.txt</code>文件或将<code>spring.banner.location</code>属性设置为此类文件的位置来改变。如果该文件的编码不是UTF-8，你可以设置<code>spring.banner.charset</code>。</p><p>在 banner.txt 文件中，您可以使用 Environment 中的任何键以及以下任何占位符:</p><p><em>Table 4. Banner variables</em></p>',5),g=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Variable"),n("th",{style:{"text-align":"left"}},"Description")])],-1),f=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"${application.version}")]),n("td",{style:{"text-align":"left"}},[a("The version number of your application, as declared in "),n("code",null,"MANIFEST.MF"),a(". For example, "),n("code",null,"Implementation-Version: 1.0"),a(" is printed as "),n("code",null,"1.0"),a(".")])],-1),y=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"${application.formatted-version}")]),n("td",{style:{"text-align":"left"}},[a("The version number of your application, as declared in "),n("code",null,"MANIFEST.MF"),a(" and formatted for display (surrounded with brackets and prefixed with "),n("code",null,"v"),a("). For example "),n("code",null,"(v1.0)"),a(".")])],-1),x=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"${spring-boot.version}")]),n("td",{style:{"text-align":"left"}},[a("The Spring Boot version that you are using. For example "),n("code",null,"3.0.1"),a(".")])],-1),A=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"${spring-boot.formatted-version}")]),n("td",{style:{"text-align":"left"}},[a("The Spring Boot version that you are using, formatted for display (surrounded with brackets and prefixed with "),n("code",null,"v"),a("). For example "),n("code",null,"(v3.0.1)"),a(".")])],-1),S=n("td",{style:{"text-align":"left"}},[n("code",null,"${Ansi.NAME}"),a(" (or "),n("code",null,"${AnsiColor.NAME}"),a(", "),n("code",null,"${AnsiBackground.NAME}"),a(", "),n("code",null,"${AnsiStyle.NAME}"),a(")")],-1),T={style:{"text-align":"left"}},w=n("code",null,"NAME",-1),N={href:"https://github.com/spring-projects/spring-boot/tree/v3.0.1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiPropertySource.java",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"AnsiPropertySource",-1),I=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"${application.title}")]),n("td",{style:{"text-align":"left"}},[a("The title of your application, as declared in "),n("code",null,"MANIFEST.MF"),a(". For example "),n("code",null,"Implementation-Title: MyApp"),a(" is printed as "),n("code",null,"MyApp"),a(".")])],-1),B=e('<div class="custom-container tip"><p class="custom-container-title">Tip</p><p>如果你想以编程方式生成一个横幅，可以使用<code>SpringApplication.setBanner(..)</code>方法。使用<code>org.springframework.boot.Banner</code>接口并实现你自己的<code>printBanner()</code>方法。</p></div><p>您还可以使用 <code>spring.main.banner-mode</code> 属性来确定是否必须在 <code>System.out (console)</code>上打印、发送到配置的日志记录器(log) ，或者根本不生成(关闭)。</p><p>打印的横幅注册为一个单例 bean，名称如下: <code>springBootBanner</code>。</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>只有在使用 Spring Boot 启动程序时，<code>${ application.version }</code>和 <code>${ application.format-version }</code>属性才可用。如果您正在运行一个解压的 jar 并以<code>java -cp &lt;classspath&gt; &lt;mainclass&gt;</code>启动它，那么这些值将不会被解析。</p><p>这就是为什么我们建议您总是使用<code>java org.springframework.boot.loader.JarLauncher</code>启动解压的 jar。.这将初始化<code>application.*</code> 在构建类路径和启动应用程序之前的banner变量。</p></div><h2 id="_1-4" tabindex="-1"><a class="header-anchor" href="#_1-4" aria-hidden="true">#</a> 1.4</h2><h2 id="_1-5" tabindex="-1"><a class="header-anchor" href="#_1-5" aria-hidden="true">#</a> 1.5</h2><h2 id="_1-6" tabindex="-1"><a class="header-anchor" href="#_1-6" aria-hidden="true">#</a> 1.6</h2><h2 id="_1-7" tabindex="-1"><a class="header-anchor" href="#_1-7" aria-hidden="true">#</a> 1.7</h2><h2 id="_1-8" tabindex="-1"><a class="header-anchor" href="#_1-8" aria-hidden="true">#</a> 1.8</h2><h2 id="_1-9" tabindex="-1"><a class="header-anchor" href="#_1-9" aria-hidden="true">#</a> 1.9</h2><h2 id="_1-10" tabindex="-1"><a class="header-anchor" href="#_1-10" aria-hidden="true">#</a> 1.10</h2><h2 id="_1-11" tabindex="-1"><a class="header-anchor" href="#_1-11" aria-hidden="true">#</a> 1.11</h2><h2 id="_1-12" tabindex="-1"><a class="header-anchor" href="#_1-12" aria-hidden="true">#</a> 1.12</h2><h2 id="_1-13" tabindex="-1"><a class="header-anchor" href="#_1-13" aria-hidden="true">#</a> 1.13</h2>',14);function M(j,z){const o=i("CodeTabs"),l=i("ExternalLinkIcon");return u(),m("div",null,[h,s(o,{id:"51",data:[{title:"properties"},{title:"yaml"}]},{tab0:t(({title:c,value:p,isActive:r})=>[b]),tab1:t(({title:c,value:p,isActive:r})=>[k]),_:1}),_,n("table",null,[g,n("tbody",null,[f,y,x,A,n("tr",null,[S,n("td",T,[a("Where "),w,a(" is the name of an ANSI escape code. See "),n("a",N,[F,s(l)]),a(" for details.")])]),I])]),B])}const O=d(v,[["render",M],["__file","03CoreFeatures.html.vue"]]);export{O as default};
