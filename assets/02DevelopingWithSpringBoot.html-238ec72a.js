import{_ as o,V as i,W as l,X as n,Y as s,Z as t,$ as e,D as p}from"./framework-e08d74b1.js";const r={},c=e('<h1 id="用-spring-boot-进行开发" tabindex="-1"><a class="header-anchor" href="#用-spring-boot-进行开发" aria-hidden="true">#</a> 用 Spring Boot 进行开发</h1><h2 id="_1-系统构建" tabindex="-1"><a class="header-anchor" href="#_1-系统构建" aria-hidden="true">#</a> 1. 系统构建</h2><p>强烈建议您选择一个支持依赖项管理并且可以使用发布到“ Maven Central”存储库的构建系统。我们建议您选择Maven或Gradle。让 SpringBoot 与其他构建系统(例如 Ant)一起工作是可能的，但是它们并没有得到很好的支持。</p><h3 id="_1-1-依赖管理" tabindex="-1"><a class="header-anchor" href="#_1-1-依赖管理" aria-hidden="true">#</a> 1.1. 依赖管理</h3><p>SpringBoot 的每个版本都提供了一个它所支持的依赖项的管理列表。实际上，您不需要为构建配置中的任何这些依赖项提供版本，因为 Spring Boot 会为您管理这些依赖项。当您升级 SpringBoot 本身时，这些依赖项也会以一致的方式进行升级。</p><div class="custom-container info"><p class="custom-container-title">相关信息</p><p>你仍然可以指定一个版本，并在需要时覆盖Spring Boot的建议。</p></div><p>策划列表包含所有可以用于 Spring Boot 的 Spring 模块，以及一个经过改进的第三方库列表。</p><p>该列表可以作为标准的材料清单(<code>spring-boot-dependencies</code>) ，可以与 Maven 和 Gradle 一起使用。</p><div class="custom-container tip"><p class="custom-container-title">warn</p><p>SpringBoot 的每个版本都与 SpringFramework 的基本版本相关联。我们强烈建议您不要指定其版本。</p></div><h3 id="_1-2-maven" tabindex="-1"><a class="header-anchor" href="#_1-2-maven" aria-hidden="true">#</a> 1.2. Maven</h3><p>要了解如何在 Maven 中使用 Spring Boot，请参阅 Spring Boot 的 Maven 插件文档:</p>',11),d={href:"https://docs.spring.io/spring-boot/docs/3.0.1/maven-plugin/reference/htmlsingle/#?",target:"_blank",rel:"noopener noreferrer"},u=n("h3",{id:"_1-3-gradle",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-3-gradle","aria-hidden":"true"},"#"),s(" 1.3. Gradle")],-1),g=n("p",null,"要了解如何使用 Spring Boot with Gradle，请参阅 Spring Boot’s Gradle 插件的文档:",-1),k={href:"https://docs.spring.io/spring-boot/docs/3.0.1/gradle-plugin/reference/htmlsingle/",target:"_blank",rel:"noopener noreferrer"},v=e('<h3 id="_1-4-ant" tabindex="-1"><a class="header-anchor" href="#_1-4-ant" aria-hidden="true">#</a> 1.4. Ant</h3><p>自己去看</p><h3 id="_1-5-starters" tabindex="-1"><a class="header-anchor" href="#_1-5-starters" aria-hidden="true">#</a> 1.5. Starters</h3><p>Starters是一组方便的依赖关系描述，可以包含在应用程序中。</p><p>您可以一站式地了解所有需要的 Spring 和相关技术，而不必搜索示例代码和复制粘贴大量的依赖关系描述符</p><p>例如，如果希望开始使用 Spring 和 JPA 进行数据库访问，请在项目中包含 <code>Spring-boot-starter-data-JPA</code> 依赖。</p><p>Starters包含许多依赖项，您需要这些依赖项使项目快速启动和运行，并且具有一致的、受支持的托管传递依赖项集合。</p>',7),m={class:"custom-container tip"},b=n("p",{class:"custom-container-title"},"提示",-1),h=n("p",null,"名称中有什么",-1),f=n("p",null,[s("所有正式Starters都遵循类似的命名模式;"),n("code",null,"spring-boot-starter-*"),s(","),n("code",null,"*"),s(" 是一个特定类型的应用程序。")],-1),_=n("p",null,"这种命名结构是为了在您需要找到starter时提供帮助。许多 IDE 中的 Maven 集成允许您按名称搜索依赖项",-1),S=n("p",null,"例如，在安装了适当的 Eclipse 或 Spring Tools 插件之后，您可以在 POM 编辑器中按 ctrl-space 并键入“ Spring-boot-starter”以获得完整的列表。",-1),y={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#features.developing-auto-configuration.custom-starter",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"Thirdpartyproject",-1),w=n("code",null,"Thirdpartyproject-spring-boot-starter",-1),A=n("p",null,[s("Spring Boot 在 "),n("code",null,"org.springframework.Boot"),s(" 组下提供了以下应用程序starters :")],-1),B=n("p",null,[n("em",null,"Table 1. Spring Boot application starters")],-1),j=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Name"),n("th",{style:{"text-align":"left"}},"Description")])],-1),C=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter")]),n("td",{style:{"text-align":"left"}},"Core starter, including auto-configuration support, logging and YAML")],-1),M=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-amqp")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring AMQP and Rabbit MQ")],-1),D=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-aop")]),n("td",{style:{"text-align":"left"}},"Starter for aspect-oriented programming with Spring AOP and AspectJ")],-1),E=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-artemis")]),n("td",{style:{"text-align":"left"}},"Starter for JMS messaging using Apache Artemis")],-1),R=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-batch")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring Batch")],-1),T=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-cache")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring Framework’s caching support")],-1),I=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-cassandra")]),n("td",{style:{"text-align":"left"}},"Starter for using Cassandra distributed database and Spring Data Cassandra")],-1),J=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-cassandra-reactive")]),n("td",{style:{"text-align":"left"}},"Starter for using Cassandra distributed database and Spring Data Cassandra Reactive")],-1),P=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-couchbase")]),n("td",{style:{"text-align":"left"}},"Starter for using Couchbase document-oriented database and Spring Data Couchbase")],-1),N=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-couchbase-reactive")]),n("td",{style:{"text-align":"left"}},"Starter for using Couchbase document-oriented database and Spring Data Couchbase Reactive")],-1),O=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-elasticsearch")]),n("td",{style:{"text-align":"left"}},"Starter for using Elasticsearch search and analytics engine and Spring Data Elasticsearch")],-1),V=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-jdbc")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring Data JDBC")],-1),L=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-jpa")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring Data JPA with Hibernate")],-1),G=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-ldap")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring Data LDAP")],-1),q=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-mongodb")]),n("td",{style:{"text-align":"left"}},"Starter for using MongoDB document-oriented database and Spring Data MongoDB")],-1),H=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-mongodb-reactive")]),n("td",{style:{"text-align":"left"}},"Starter for using MongoDB document-oriented database and Spring Data MongoDB Reactive")],-1),X=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-neo4j")]),n("td",{style:{"text-align":"left"}},"Starter for using Neo4j graph database and Spring Data Neo4j")],-1),F=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-r2dbc")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring Data R2DBC")],-1),Q=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-redis")]),n("td",{style:{"text-align":"left"}},"Starter for using Redis key-value data store with Spring Data Redis and the Lettuce client")],-1),W=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-redis-reactive")]),n("td",{style:{"text-align":"left"}},"Starter for using Redis key-value data store with Spring Data Redis reactive and the Lettuce client")],-1),$=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-data-rest")]),n("td",{style:{"text-align":"left"}},"Starter for exposing Spring Data repositories over REST using Spring Data REST")],-1),U=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-freemarker")]),n("td",{style:{"text-align":"left"}},"Starter for building MVC web applications using FreeMarker views")],-1),z=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-graphql")]),n("td",{style:{"text-align":"left"}},"Starter for building GraphQL applications with Spring GraphQL")],-1),Y=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-groovy-templates")]),n("td",{style:{"text-align":"left"}},"Starter for building MVC web applications using Groovy Templates views")],-1),Z=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-hateoas")]),n("td",{style:{"text-align":"left"}},"Starter for building hypermedia-based RESTful web application with Spring MVC and Spring HATEOAS")],-1),K=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-integration")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring Integration")],-1),nn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-jdbc")]),n("td",{style:{"text-align":"left"}},"Starter for using JDBC with the HikariCP connection pool")],-1),sn=n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-jersey")],-1),an={style:{"text-align":"left"}},tn={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#spring-boot-starter-web",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"spring-boot-starter-web",-1),on=n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-jooq")],-1),ln={style:{"text-align":"left"}},pn={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#spring-boot-starter-data-jpa",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"spring-boot-starter-data-jpa",-1),cn={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#spring-boot-starter-jdbc",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"spring-boot-starter-jdbc",-1),un=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-json")]),n("td",{style:{"text-align":"left"}},"Starter for reading and writing json")],-1),gn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-mail")]),n("td",{style:{"text-align":"left"}},"Starter for using Java Mail and Spring Framework’s email sending support")],-1),kn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-mustache")]),n("td",{style:{"text-align":"left"}},"Starter for building web applications using Mustache views")],-1),vn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-oauth2-client")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring Security’s OAuth2/OpenID Connect client features")],-1),mn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-oauth2-resource-server")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring Security’s OAuth2 resource server features")],-1),bn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-quartz")]),n("td",{style:{"text-align":"left"}},"Starter for using the Quartz scheduler")],-1),hn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-rsocket")]),n("td",{style:{"text-align":"left"}},"Starter for building RSocket clients and servers")],-1),fn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-security")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring Security")],-1),_n=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-test")]),n("td",{style:{"text-align":"left"}},"Starter for testing Spring Boot applications with libraries including JUnit Jupiter, Hamcrest and Mockito")],-1),Sn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-thymeleaf")]),n("td",{style:{"text-align":"left"}},"Starter for building MVC web applications using Thymeleaf views")],-1),yn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-validation")]),n("td",{style:{"text-align":"left"}},"Starter for using Java Bean Validation with Hibernate Validator")],-1),xn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-web")]),n("td",{style:{"text-align":"left"}},"Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container")],-1),wn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-web-services")]),n("td",{style:{"text-align":"left"}},"Starter for using Spring Web Services")],-1),An=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-webflux")]),n("td",{style:{"text-align":"left"}},"Starter for building WebFlux applications using Spring Framework’s Reactive Web support")],-1),Bn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-websocket")]),n("td",{style:{"text-align":"left"}},"Starter for building WebSocket applications using Spring Framework’s WebSocket support")],-1),jn=e('<p><em>Table 2. Spring Boot production starters</em></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>spring-boot-starter-actuator</code></td><td style="text-align:left;">Starter for using Spring Boot’s Actuator which provides production ready features to help you monitor and manage your application</td></tr></tbody></table><p><em>Table 3. Spring Boot technical starters</em></p>',3),Cn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Name"),n("th",{style:{"text-align":"left"}},"Description")])],-1),Mn=n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-jetty")],-1),Dn={style:{"text-align":"left"}},En={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#spring-boot-starter-tomcat",target:"_blank",rel:"noopener noreferrer"},Rn=n("code",null,"spring-boot-starter-tomcat",-1),Tn=n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-log4j2")],-1),In={style:{"text-align":"left"}},Jn={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#spring-boot-starter-logging",target:"_blank",rel:"noopener noreferrer"},Pn=n("code",null,"spring-boot-starter-logging",-1),Nn=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-logging")]),n("td",{style:{"text-align":"left"}},"Starter for logging using Logback. Default logging starter")],-1),On=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-reactor-netty")]),n("td",{style:{"text-align":"left"}},"Starter for using Reactor Netty as the embedded reactive HTTP server.")],-1),Vn=n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-tomcat")],-1),Ln={style:{"text-align":"left"}},Gn={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#spring-boot-starter-web",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"spring-boot-starter-web",-1),Hn=n("td",{style:{"text-align":"left"}},[n("code",null,"spring-boot-starter-undertow")],-1),Xn={style:{"text-align":"left"}},Fn={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#spring-boot-starter-tomcat",target:"_blank",rel:"noopener noreferrer"},Qn=n("code",null,"spring-boot-starter-tomcat",-1),Wn={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#howto.webserver.use-another",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#howto.logging.log4j",target:"_blank",rel:"noopener noreferrer"},Un={class:"custom-container tip"},zn=n("p",{class:"custom-container-title"},"note",-1),Yn={href:"https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-starters/README.adoc",target:"_blank",rel:"noopener noreferrer"},Zn=e(`<h2 id="_2-构建代码" tabindex="-1"><a class="header-anchor" href="#_2-构建代码" aria-hidden="true">#</a> 2.构建代码</h2><p>SpringBoot 不需要任何特定的代码布局来工作。</p><h3 id="_2-1-使用-default-包" tabindex="-1"><a class="header-anchor" href="#_2-1-使用-default-包" aria-hidden="true">#</a> 2.1. 使用“ default”包</h3><p>当一个类不包含一个包声明时，它被认为是在“默认包”中。通常不鼓励使用“默认包”，应该避免使用。</p><p>它可能会给使用<code>@ComponentScan</code>、<code>@ConfigurationPropertiesScan</code>、<code>@EntityScan</code> 或<code>@SpringBootApplication</code> 注释的 Spring 启动应用程序带来特殊的问题，因为每个 jar 中的每个类都会被读取。</p><div class="custom-container tip"><p class="custom-container-title">note</p><p>我们建议您遵循 Java 推荐的包命名约定，并使用反向域名(例如，com.example.project)。</p></div><h3 id="_2-2-定位主程序类" tabindex="-1"><a class="header-anchor" href="#_2-2-定位主程序类" aria-hidden="true">#</a> 2.2. 定位主程序类</h3><p>我们通常建议您将主应用程序类定位在其他类之上的根包中。<code>@SpringBootApplication</code> 注释通常放置在主类上，并且它隐式地为某些项目定义了一个基本的“搜索包”。例如，如果您正在编写一个 JPA 应用程序，那么@SpringBootApplication 注释类的包将用于搜索<code>@Entity </code>项。使用根包还允许组件扫描仅应用于您的项目。</p><div class="custom-container tip"><p class="custom-container-title">note</p><p>如果您不想使用<code>@SpringBootApplication</code>，它导入的<code>@EnableAutoConfiguration</code> 和<code>@ComponententScan</code> 注释将定义该行为，因此您也可以使用这些行为。</p></div><p>下面的清单显示了一个典型的布局:</p><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>com
 +- example
     +- myapplication
         +- MyApplication.java
         |
         +- customer
         |   +- Customer.java
         |   +- CustomerController.java
         |   +- CustomerService.java
         |   +- CustomerRepository.java
         |
         +- order
             +- Order.java
             +- OrderController.java
             +- OrderService.java
             +- OrderRepository.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>MyApplication.java </code>文件将声明 <code>main </code>方法和基本的<code>@SpringBootApplication</code>，如下所示:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-类配置" tabindex="-1"><a class="header-anchor" href="#_3-类配置" aria-hidden="true">#</a> 3. 类配置</h2><p>SpringBoot 支持基于 Java 的配置。尽管可以将 <code>SpringApplication </code>与 XML 源一起使用，但我们通常建议您的主要是单个<code>@Configuration </code>类。通常定义<code> main</code> 方法的类可以作为主<code>@Configuration</code>。</p><div class="custom-container tip"><p class="custom-container-title">note</p><p>互联网上已经发布了许多使用 XML 配置的 Spring 配置示例。如果可能，经常尝试使用等效的基于 Java 的配置。搜索 <code>Enable * </code>注解是一个很好的起点。</p></div><h4 id="_3-1-导入其他配置类" tabindex="-1"><a class="header-anchor" href="#_3-1-导入其他配置类" aria-hidden="true">#</a> 3.1. 导入其他配置类</h4><p>您不需要将所有<code>@Configuration</code> 放到一个类中。<code>@Import</code> 注释可用于导入其他配置类。或者，可以使用<code>@ComponententScan</code> 自动扫描所有 Spring 组件，包括<code>@Configuration</code> 类。</p><h4 id="_3-2-导入xml配置" tabindex="-1"><a class="header-anchor" href="#_3-2-导入xml配置" aria-hidden="true">#</a> 3.2. 导入XML配置</h4><p>如果您绝对必须使用基于 XML 的配置，我们建议您仍然从<code>@Configuration</code> 类开始。然后可以使用<code>@ImportResource</code> 注释来加载 XML 配置文件。</p><h2 id="_4-自动装配" tabindex="-1"><a class="header-anchor" href="#_4-自动装配" aria-hidden="true">#</a> 4.自动装配</h2><p>SpringBoot 自动配置尝试根据添加的 jar 依赖项自动配置 Spring 应用程序。例如，如果 <code>HSQLDB </code>在您的类路径上，而您还没有手动配置任何数据库连接 bean，那么 Spring Boot 会自动配置一个内存数据库。</p><p>您需要通过将<code>@EnableAutoConfiguration</code> 或<code>@SpringBootApplication</code> 注释添加到<code>@Configuration</code> 类中来选择自动配置。</p><div class="custom-container tip"><p class="custom-container-title">note</p><p>您应该只添加一个<code>@SpringBootApplication</code> 或<code>@EnableAutoConfiguration</code> 注解。我们通常建议您只在主<code>@Configuration </code>类中添加一个或另一个。</p></div><h3 id="_4-1-逐步替换自动配置" tabindex="-1"><a class="header-anchor" href="#_4-1-逐步替换自动配置" aria-hidden="true">#</a> 4.1. 逐步替换自动配置</h3><p>自动配置是非侵入性的。在任何时候，您都可以开始定义自己的配置来替换自动配置的特定部分。例如，如果添加自己的 DataSource bean，则默认的嵌入式数据库支持将后退。</p><p>如果需要了解当前正在应用哪些自动配置，以及为什么要这样做，请使用<code>--debug</code> 开关启动应用程序。这样做可以为核心日志记录器的选择启用调试日志，并将条件报告记录到控制台。</p><h3 id="_4-2-禁用特定的自动配置类" tabindex="-1"><a class="header-anchor" href="#_4-2-禁用特定的自动配置类" aria-hidden="true">#</a> 4.2. 禁用特定的自动配置类</h3><p>如果您发现不需要的特定自动配置类正在被应用，您可以使用<code>@SpringBootApplication </code>的排除属性来禁用它们，如下面的示例所示:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">DataSourceAutoConfiguration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果类不在类路径中，则可以使用注释的 <code>excludeName</code> 属性并指定完全限定名。如果您更喜欢使用<code>@EnableAutoConfiguration</code> 而不是<code>@SpringBootApplication</code>，那么也可以使用 <code>excludeName</code>。最后，您还可以通过使用 <code>spring.autoconfigure.exclude 属性</code>來控制要排除的自动设置类的清单。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>您可以在注解级别和通过使用属性定义排除。</p></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>尽管自动配置类是公共的，但是这个类中唯一被认为是公共 API 的方面是可以用来禁用自动配置的类的名称。这些类的实际内容，例如嵌套的配置类或 bean 方法，仅供内部使用，我们不建议直接使用它们。</p></div><h2 id="_5-spring-bean和依赖注入" tabindex="-1"><a class="header-anchor" href="#_5-spring-bean和依赖注入" aria-hidden="true">#</a> 5.Spring bean和依赖注入</h2><p>您可以自由地使用任何标准的 Spring 框架技术来定义 bean 及其注入的依赖项。我们通常建议使用构造函数注入来连接依赖项，使用<code>@ComponententScan </code>来查找 bean。</p><p>如果您按照上面建议的方式构造代码(将应用程序类放在一个顶部包中) ，那么您可以添加<code>@ComponentScan</code>，而不需要任何参数，或者使用<code>@SpringBootApplication</code> 注释，该注解隐式地包含了它。所有应用程序组件(<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code> 等)都会自动注册为 Spring Bean。</p><p>下面的例子展示了<code>@Service</code> Bean，它使用构造函数注入来获得所需的 <code>RiskAssessor</code> Bean:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAccountService</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RiskAssessor</span> riskAssessor<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyAccountService</span><span class="token punctuation">(</span><span class="token class-name">RiskAssessor</span> riskAssessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>riskAssessor <span class="token operator">=</span> riskAssessor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个 bean 有多个构造函数，那么你需要在<code>@Autowired </code>中标记你希望 Spring 使用的构造函数:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAccountService</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RiskAssessor</span> riskAssessor<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> out<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">MyAccountService</span><span class="token punctuation">(</span><span class="token class-name">RiskAssessor</span> riskAssessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>riskAssessor <span class="token operator">=</span> riskAssessor<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>out <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">MyAccountService</span><span class="token punctuation">(</span><span class="token class-name">RiskAssessor</span> riskAssessor<span class="token punctuation">,</span> <span class="token class-name">PrintStream</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>riskAssessor <span class="token operator">=</span> riskAssessor<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>out <span class="token operator">=</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>注意，如何使用构造函数注入将 riskAssessor 字段标记为 final，表明不能随后更改该字段。</p></div><h2 id="_6-用-springbootapplication注解" tabindex="-1"><a class="header-anchor" href="#_6-用-springbootapplication注解" aria-hidden="true">#</a> 6.用 @SpringBootApplication注解</h2><p>许多 Spring Boot 开发人员喜欢他们的应用程序使用自动配置、组件扫描，并且能够在他们的“应用程序类”上定义额外的配置。可以使用一个<code>@SpringBootApplication </code>注释来启用这三个特性，即:</p>`,43),Kn=n("li",null,[n("code",null,"@EnableAutoConfiguration"),s(": 启用 Spring Boot 的自动配置机制")],-1),ns=n("code",null,"@ComponentScan",-1),ss={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#using.structuring-your-code",target:"_blank",rel:"noopener noreferrer"},as=n("li",null,[n("code",null,"@SpringBootConfiguration"),s(": 允许在上下文中注册额外的 bean 或导入额外的配置类。Spring 标准"),n("code",null,"@Configuration "),s("的一种替代方案，它有助于在集成测试中进行配置检测。")],-1),ts=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token comment">// Same as @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p><code>@SpringBootApplication</code> 还提供别名来定制<code>@EnableAutoConfiguration</code> 和<code>@ComponententScan </code>的属性。</p></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>这些特性都不是强制性的，您可以选择用它所支持的任何特性来替换这个单独的注解。例如，您可能不希望在应用程序中使用组件扫描或配置属性扫描:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringBootConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">EnableAutoConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Import</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">SomeConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">AnotherConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>MyApplication </code>就像任何其他 Spring Boot 应用程序一样，只不过<code>@Component </code>注释类和<code>@ConfigurationProperties </code>注释类不会被自动检测到，而且用户定义的 bean 是显式导入的(参见@Import)。</p></div><h2 id="_7-运行您的应用程序" tabindex="-1"><a class="header-anchor" href="#_7-运行您的应用程序" aria-hidden="true">#</a> 7.运行您的应用程序</h2><p>将你的应用程序打包成jar并使用嵌入式HTTP服务器的最大优势之一是，你可以像其他应用程序一样运行你的应用程序。该样本适用于调试Spring Boot应用程序。你不需要任何特殊的IDE插件或扩展。</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>本节只涉及基于jar的打包。如果你选择将你的应用程序打包成war文件，请参阅你的服务器和IDE文档。</p></div><h3 id="_7-1-从ide中运行" tabindex="-1"><a class="header-anchor" href="#_7-1-从ide中运行" aria-hidden="true">#</a> 7.1. 从IDE中运行</h3><p>你可以从你的IDE中作为一个Java应用程序运行Spring Boot应用程序。不过，你首先需要导入你的项目。导入步骤因你的IDE和构建系统而异。大多数IDE可以直接导入Maven项目。例如，Eclipse用户可以从<code>File</code>菜单中选择<code>Import...</code>→<code>Existing Maven Projects</code>。</p><p>如果你不能直接将项目导入IDE，你可以通过使用构建插件来生成IDE元数据。Maven包括Eclipse和IDEA的插件。Gradle为各种IDE提供插件。</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>如果你不小心运行了两次网络应用程序，你会看到一个 &quot;端口已经在使用 &quot;的错误。Spring Tools用户可以使用<code>Relaunch</code>按钮而不是<code>Run</code>按钮来确保任何现有的实例被关闭。</p></div><h3 id="_7-2-作为一个打包的应用程序运行" tabindex="-1"><a class="header-anchor" href="#_7-2-作为一个打包的应用程序运行" aria-hidden="true">#</a> 7.2. 作为一个打包的应用程序运行</h3><p>如果你使用Spring Boot的Maven或Gradle插件来创建一个可执行的jar，你可以使用<code>java -jar</code>来运行你的应用程序，如下例所示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> target/myapplication-0.0.1-SNAPSHOT.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以在启用远程调试支持的情况下运行一个打包的应用程序。这样做可以让你把调试器附加到你的打包的应用程序上，如下面的例子中所示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-Xdebug</span> <span class="token parameter variable">-Xrunjdwp:server</span><span class="token operator">=</span>y,transport<span class="token operator">=</span>dt_socket,address<span class="token operator">=</span><span class="token number">8000</span>,suspend<span class="token operator">=</span>n <span class="token punctuation">\\</span>
       <span class="token parameter variable">-jar</span> target/myapplication-0.0.1-SNAPSHOT.jar

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-使用-maven-插件" tabindex="-1"><a class="header-anchor" href="#_7-3-使用-maven-插件" aria-hidden="true">#</a> 7.3. 使用 Maven 插件</h3><p>Spring Boot Maven插件包括一个运行目标，可用于快速编译和运行您的应用程序。应用程序以爆炸的形式运行，就像在IDE中一样。下面的例子显示了运行Spring Boot应用程序的典型Maven命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ mvn spring-boot:run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可能还想使用<code>MAVEN_OPTS</code>操作系统环境变量，如下例所示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">MAVEN_OPTS</span><span class="token operator">=</span>-Xmx1024m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-4-using-the-gradle-plugin" tabindex="-1"><a class="header-anchor" href="#_7-4-using-the-gradle-plugin" aria-hidden="true">#</a> 7.4. Using the Gradle Plugin</h3><p>Spring Boot Gradle插件还包括一个<code>bootRun</code>任务，可以用来以爆炸的形式运行你的应用程序。只要你应用<code>org.springframework.boot</code>和<code>java</code>插件，<code>bootRun</code>任务就会被添加进来，如下例所示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gradle bootRun
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以使用<code>JAVA _ OPTS</code>操作系统环境变量，如下例所示:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span>-Xmx1024m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-5-hot-swapping" tabindex="-1"><a class="header-anchor" href="#_7-5-hot-swapping" aria-hidden="true">#</a> 7.5. Hot Swapping</h3><p>由于Spring Boot应用程序是普通的Java应用程序，JVM热交换应该可以开箱即用。JVM热交换所能替换的字节码有一定的限制。要想获得更完整的解决方案，可以使用JRebel。</p>`,27),es=n("code",null,"Spring-boot-devtools ",-1),os={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#howto.hotswapping",target:"_blank",rel:"noopener noreferrer"},is=e(`<h2 id="_8-开发人员工具" tabindex="-1"><a class="header-anchor" href="#_8-开发人员工具" aria-hidden="true">#</a> 8.开发人员工具</h2><p>Spring Boot包括一套额外的工具，可以使应用程序开发的体验更加愉快。 <code>Spring-boot-devtools</code>模块可以包含在任何项目中，提供额外的开发时间功能。 要包含devtools支持，请将模块依赖性添加到构建中，如下面Maven和Gradle的列表所示。</p><p><em>Maven</em></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Gradle</em></p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    <span class="token function">developmentOnly</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.springframework.boot:spring-boot-devtools&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Caution</p><p>Devtools可能会导致classloading问题，特别是在多模块项目中。<code>Diagnosing Classloading Issues</code>解释了如何诊断和解决这些问题。</p></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p>当运行一个完全打包的应用程序时，开发者工具会被自动禁用。.如果你的应用程序是从<code>java -jar</code>启动的，或者是从一个特殊的classloader启动的，那么它就被认为是一个 &quot;生产应用程序&quot;。你可以通过使用<code>spring.devtools.restart.enabled</code>系统属性来控制这种行为。要启用devtools，无论用于启动你的应用程序的类加载器是什么，设置<code>-Dspring.devtools.restart.enabled=true</code>系统属性。在生产环境中不能这样做，因为运行devtools会有安全风险。要禁用devtools，请排除该依赖关系或设置<code>-Dspring.devtools.restart.enabled=false</code>系统属性。</p></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>在Maven中把该依赖标记为可选，或在Gradle中使用<code>developmentOnly</code>配置（如上图所示），可以防止devtools被过渡应用到使用你的项目的其他模块。</p></div>`,9),ls={class:"custom-container info"},ps=n("p",{class:"custom-container-title"},"相关信息",-1),rs=n("p",null,"这里只做简单说明，需要详细了解热更新的，可以参考这篇文章",-1),cs={href:"https://blog.csdn.net/qq_42217906/article/details/122541220",target:"_blank",rel:"noopener noreferrer"},ds=n("h2",{id:"_9-打包应用程序到生产环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-打包应用程序到生产环境","aria-hidden":"true"},"#"),s(" 9.打包应用程序到生产环境")],-1),us=n("p",null,"可执行的 jar 可以用于生产部署，因为它们是自包含的，所以也非常适合基于云的部署。",-1),gs={href:"https://docs.spring.io/spring-boot/docs/3.0.1/reference/htmlsingle/#actuator",target:"_blank",rel:"noopener noreferrer"},ks=n("h2",{id:"_10-接下来干什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-接下来干什么","aria-hidden":"true"},"#"),s(" 10.接下来干什么")],-1),vs=n("p",null,"现在您应该了解如何使用 SpringBoot 以及应该遵循的一些最佳实践。您现在可以继续深入了解特定的 Spring Boot 特性，或者您可以跳过前面的内容，阅读 Spring Boot 的“生产就绪”方面。",-1);function ms(bs,hs){const a=p("ExternalLinkIcon");return i(),l("div",null,[c,n("p",null,[n("a",d,[s("参考"),t(a)])]),u,g,n("p",null,[n("a",k,[s("参考"),t(a)])]),v,n("div",m,[b,h,f,_,S,n("p",null,[s("正如“创建您自己的"),n("a",y,[s("Starter"),t(a)]),s("”部分所解释的，第三方启动程序不应该从 Spring-Boot 开始，因为它是为正式的 Spring Boot 构件保留的。相反，第三方启动者通常以项目的名称开始。例如，名为 "),x,s(" 的第三方启动项目通常被命名为"),w,s("。")])]),A,B,n("table",null,[j,n("tbody",null,[C,M,D,E,R,T,I,J,P,N,O,V,L,G,q,H,X,F,Q,W,$,U,z,Y,Z,K,nn,n("tr",null,[sn,n("td",an,[s("Starter for building RESTful web applications using JAX-RS and Jersey. An alternative to "),n("a",tn,[en,t(a)])])]),n("tr",null,[on,n("td",ln,[s("Starter for using jOOQ to access SQL databases with JDBC. An alternative to "),n("a",pn,[rn,t(a)]),s(" or "),n("a",cn,[dn,t(a)])])]),un,gn,kn,vn,mn,bn,hn,fn,_n,Sn,yn,xn,wn,An,Bn])]),jn,n("table",null,[Cn,n("tbody",null,[n("tr",null,[Mn,n("td",Dn,[s("Starter for using Jetty as the embedded servlet container. An alternative to "),n("a",En,[Rn,t(a)])])]),n("tr",null,[Tn,n("td",In,[s("Starter for using Log4j2 for logging. An alternative to "),n("a",Jn,[Pn,t(a)])])]),Nn,On,n("tr",null,[Vn,n("td",Ln,[s("Starter for using Tomcat as the embedded servlet container. Default servlet container starter used by "),n("a",Gn,[qn,t(a)])])]),n("tr",null,[Hn,n("td",Xn,[s("Starter for using Undertow as the embedded servlet container. An alternative to "),n("a",Fn,[Qn,t(a)])])])])]),n("p",null,[s("要了解如何交换技术方面，请参阅如何 "),n("a",Wn,[s("swapping web server"),t(a)]),s(" 和 "),n("a",$n,[s("logging system"),t(a)]),s("。")]),n("div",Un,[zn,n("p",null,[s("有关其他社区贡献的starters的列表，请参见 GitHub 上 spring-boot-starter 模块中的 "),n("a",Yn,[s("README file"),t(a)]),s("。")])]),Zn,n("ul",null,[Kn,n("li",null,[ns,s(": 应用程序所在的包上启用@Component 扫描(请参阅最佳实践) (see "),n("a",ss,[s("the best practices"),t(a)]),s(")")]),as]),ts,n("p",null,[es,s("模块还支持快速重启应用程序。See the "),n("a",os,[s("Hot swapping “How-to”"),t(a)]),s(" for details.")]),is,n("div",ls,[ps,rs,n("p",null,[n("a",cs,[s("https://blog.csdn.net/qq_42217906/article/details/122541220"),t(a)])])]),ds,us,n("p",null,[s("对于额外的“生产就绪”特性，比如健康状况、审计和度量 REST 或 JMX 端点，可以考虑添加 spring-boot-actiator。有关详细信息，请参阅可生产的特性。"),n("em",null,[n("a",gs,[s("Production-ready Features"),t(a)])])]),ks,vs])}const _s=o(r,[["render",ms],["__file","02DevelopingWithSpringBoot.html.vue"]]);export{_s as default};
